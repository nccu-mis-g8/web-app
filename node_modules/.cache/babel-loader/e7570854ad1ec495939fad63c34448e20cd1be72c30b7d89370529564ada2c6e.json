{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\gp-web-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport ChatRoomHeader from \"./ChatRoomHeader\";\nimport UserMessage from \"./UserMessage\";\nimport BotMessage from \"./BotMessage\";\nimport ChooseResponse from \"./ChooseResponse\";\nimport MessageInput from \"./MessageInput\";\nimport classes from \"./MessageList.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MessageList({\n  dummy\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [pageSize, setPageSize] = useState(false);\n  useEffect(() => {\n    // 當組件首次加載時觸發淡入效果\n    setPageSize(!pageSize);\n  }, [dummy]);\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  const {\n    person\n  } = location.state || {};\n  const name = person ? person.name : \"未選擇聯絡人\";\n  async function sendMessageHandler(userMessage) {\n    setMessages([...messages, {\n      type: \"user\",\n      text: userMessage\n    }]);\n    setMessages(prevMessages => [...prevMessages, {\n      type: \"bot\",\n      text: \"尚未連接API\"\n    }]);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.outerContainer} ${pageSize ? classes.dummy : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(ChatRoomHeader, {\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.listContainer,\n        children: [messages.map((message, index) => message.type === \"user\" ? /*#__PURE__*/_jsxDEV(UserMessage, {\n          content: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(BotMessage, {\n          content: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(ChooseResponse, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: sendMessageHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MessageList, \"IubOWtI71lx3JwICrCan+7+GkQA=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["useState","useEffect","useParams","useLocation","ChatRoomHeader","UserMessage","BotMessage","ChooseResponse","MessageInput","classes","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageList","dummy","_s","messages","setMessages","pageSize","setPageSize","id","location","person","state","name","sendMessageHandler","userMessage","type","text","prevMessages","children","className","outerContainer","fileName","_jsxFileName","lineNumber","columnNumber","listContainer","map","message","index","content","onSendMessage","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/gp-web-app/frontend/src/components/chat/MessageList.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport ChatRoomHeader from \"./ChatRoomHeader\";\r\nimport UserMessage from \"./UserMessage\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport ChooseResponse from \"./ChooseResponse\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport classes from \"./MessageList.module.css\";\r\n\r\nfunction MessageList({ dummy }) {\r\n    const [messages, setMessages] = useState([]);\r\n    const [pageSize, setPageSize] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // 當組件首次加載時觸發淡入效果\r\n        setPageSize(!pageSize);\r\n    }, [dummy]);\r\n\r\n    const { id } = useParams();\r\n    const location = useLocation();\r\n    const { person } = location.state || {};\r\n\r\n    const name = person ? person.name : \"未選擇聯絡人\";\r\n\r\n    async function sendMessageHandler(userMessage) {\r\n        setMessages([...messages, { type: \"user\", text: userMessage }]);\r\n        setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { type: \"bot\", text: \"尚未連接API\" },\r\n        ]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`${classes.outerContainer} ${pageSize ? classes.dummy : \"\"}`}>\r\n                <ChatRoomHeader name={name} />\r\n                <div className={classes.listContainer}>\r\n                    {messages.map((message, index) =>\r\n                        message.type === \"user\" ? (\r\n                            <UserMessage key={index} content={message.text} />\r\n                        ) : (\r\n                            <BotMessage key={index} content={message.text} />\r\n                        )\r\n                    )}\r\n                    <ChooseResponse />\r\n                </div>\r\n                <MessageInput onSendMessage={sendMessageHandler} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MessageList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}