{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\gp-web-app\\\\frontend\\\\src\\\\components\\\\chat\\\\MessageList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { useParams, useLocation, redirect } from \"react-router-dom\";\nimport ChatRoomHeader from \"./ChatRoomHeader\";\nimport UserMessage from \"./UserMessage\";\nimport BotMessage from \"./BotMessage\";\nimport ChooseResponse from \"./ChooseResponse\";\nimport MessageInput from \"./MessageInput\";\nimport { inference } from \"../../utils/modelUtils\";\nimport { refresh } from \"../../utils/tokenUtils\";\nimport classes from \"./MessageList.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MessageList({\n  dummy,\n  dummyName\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [pageSize, setPageSize] = useState(false);\n\n  // 用於儲存前五筆對話紀錄\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [pendingChoices, setPendingChoices] = useState(null);\n  const [loadingHint, setLoadingHint] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    // 當組件首次加載時觸發淡入效果\n    setPageSize(dummy);\n  }, [dummy]);\n  useEffect(() => {\n    // 滑到底部\n    scrollToBottom();\n  }, [messages, pendingChoices]);\n  const {\n    id\n  } = useParams();\n  const location = useLocation();\n  const {\n    person\n  } = location.state || {};\n  const name = person ? person.model_original_name : dummyName;\n  const modelname = person ? person.modelname : \"\";\n  async function sendMessageHandler(userMessage) {\n    setMessages([...messages, {\n      type: \"user\",\n      text: userMessage\n    }]);\n    setLoadingHint(true);\n    const formData = new FormData();\n    formData.append(\"is_shared\", \"false\");\n    formData.append(\"modelname\", modelname);\n    formData.append(\"input_text\", userMessage);\n    try {\n      const response = await inference(formData);\n      const accessToken = localStorage.getItem(\"accessToken\");\n      if (response.status === 200) {\n        const responseData = await response.json();\n        const results = responseData.result;\n        if (results.length === 1) {\n          // 只有一個回答時\n          const botOutput = results[0].output;\n          setLoadingHint(false);\n          setMessages(prevMessages => [...prevMessages, {\n            type: \"bot\",\n            text: botOutput\n          }]);\n          updateConversationHistory({\n            user: userMessage,\n            model: botOutput\n          });\n          console.log(conversationHistory);\n        } else if (results.length > 1) {\n          // 有兩個或更多回答時\n          let botOutputs = [];\n          botOutputs[0] = results[0].output;\n          botOutputs[1] = results[1].output;\n          setLoadingHint(false);\n          setPendingChoices(botOutputs);\n          console.log(conversationHistory);\n        }\n      } else if (response.status === 400) {\n        const responseData = await response.json();\n        const error = responseData.error;\n        console.log(\"錯誤訊息: \" + error);\n      } else if (response.status === 401 && accessToken) {\n        // access Token過期，用refresh Token去拿新的access Token\n        const checkReTokenStatus = await refresh();\n        console.log(\"refresh中\");\n        if (checkReTokenStatus) {\n          const response = await inference(formData);\n          console.log(\"refresh成功\");\n          if (response.status === 200) {\n            const responseData = await response.json();\n            const results = responseData.result;\n            if (results.length === 1) {\n              // 只有一個回答時\n              const botOutput = results[0].output;\n              setLoadingHint(false);\n              setMessages(prevMessages => [...prevMessages, {\n                type: \"bot\",\n                text: botOutput\n              }]);\n              updateConversationHistory({\n                user: userMessage,\n                model: botOutput\n              });\n            } else if (results.length > 1) {\n              // 有兩個或更多回答時\n              let botOutputs = [];\n              botOutputs[0] = results[0].output;\n              botOutputs[1] = results[1].output;\n              setLoadingHint(false);\n              setPendingChoices(botOutputs);\n            }\n          }\n        } else {\n          // refresh Token過期，重新登入並刪掉 localStorage 裡的東西\n          // alert(\"refresh Token過期，請重新登入!\");\n          localStorage.clear();\n          redirect(\"/login\");\n        }\n      } else {\n        const responseData = await response.json();\n        const error = responseData.message;\n        console.error(error);\n        alert(\"發生錯誤，請重新整理後再試一次\");\n      }\n    } catch (error) {\n      console.error(\"Error durning inference model: \", error);\n      redirect(\"/login\");\n    }\n  }\n  function updateConversationHistory(newConversation) {\n    setConversationHistory(prevHistory => {\n      const updatedHistory = [...prevHistory, newConversation];\n      if (updatedHistory.length > 5) {\n        updatedHistory.shift(); // 超過 5 條時刪除最舊的\n      }\n      return updatedHistory;\n    });\n  }\n  function handleChoice(selection) {\n    var _messages;\n    // 添加選擇的回覆為 botMessage\n    setMessages(prevMessages => [...prevMessages, {\n      type: \"bot\",\n      text: selection\n    }]);\n    updateConversationHistory({\n      user: ((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.text) || \"\",\n      model: selection\n    });\n\n    // 隱藏選擇元件\n    setPendingChoices(null);\n  }\n  function scrollToBottom() {\n    // 滾動到消息列表底部\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: pageSize ? classes.outerContainerDummy : classes.outerContainer,\n      children: [/*#__PURE__*/_jsxDEV(ChatRoomHeader, {\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.listContainer,\n        children: [messages.map((message, index) => message.type === \"user\" ? /*#__PURE__*/_jsxDEV(UserMessage, {\n          content: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(BotMessage, {\n          content: message.text,\n          avatar: person.modelphoto\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }, this)), pendingChoices && /*#__PURE__*/_jsxDEV(ChooseResponse, {\n          res1: pendingChoices[0],\n          res2: pendingChoices[1],\n          onChoose: handleChoice,\n          avatar: person.modelphoto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: sendMessageHandler,\n        name: name,\n        loadingHint: loadingHint,\n        disabled: loadingHint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MessageList, \"ER51G54nSffOp54OqN/dLSldgY8=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["useState","useEffect","useRef","useParams","useLocation","redirect","ChatRoomHeader","UserMessage","BotMessage","ChooseResponse","MessageInput","inference","refresh","classes","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageList","dummy","dummyName","_s","messages","setMessages","pageSize","setPageSize","conversationHistory","setConversationHistory","pendingChoices","setPendingChoices","loadingHint","setLoadingHint","messagesEndRef","scrollToBottom","id","location","person","state","name","model_original_name","modelname","sendMessageHandler","userMessage","type","text","formData","FormData","append","response","accessToken","localStorage","getItem","status","responseData","json","results","result","length","botOutput","output","prevMessages","updateConversationHistory","user","model","console","log","botOutputs","error","checkReTokenStatus","clear","message","alert","newConversation","prevHistory","updatedHistory","shift","handleChoice","selection","_messages","current","scrollIntoView","behavior","children","className","outerContainerDummy","outerContainer","fileName","_jsxFileName","lineNumber","columnNumber","listContainer","map","index","content","avatar","modelphoto","res1","res2","onChoose","ref","onSendMessage","disabled","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/gp-web-app/frontend/src/components/chat/MessageList.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { useParams, useLocation, redirect } from \"react-router-dom\";\r\nimport ChatRoomHeader from \"./ChatRoomHeader\";\r\nimport UserMessage from \"./UserMessage\";\r\nimport BotMessage from \"./BotMessage\";\r\nimport ChooseResponse from \"./ChooseResponse\";\r\nimport MessageInput from \"./MessageInput\";\r\nimport { inference } from \"../../utils/modelUtils\";\r\nimport { refresh } from \"../../utils/tokenUtils\";\r\nimport classes from \"./MessageList.module.css\";\r\n\r\nfunction MessageList({ dummy, dummyName }) {\r\n    const [messages, setMessages] = useState([]);\r\n    const [pageSize, setPageSize] = useState(false);\r\n\r\n    // 用於儲存前五筆對話紀錄\r\n    const [conversationHistory, setConversationHistory] = useState([]);\r\n\r\n    const [pendingChoices, setPendingChoices] = useState(null);\r\n    const [loadingHint, setLoadingHint] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // 當組件首次加載時觸發淡入效果\r\n        setPageSize(dummy);\r\n    }, [dummy]);\r\n\r\n    useEffect(() => {\r\n        // 滑到底部\r\n        scrollToBottom();\r\n    }, [messages, pendingChoices]);\r\n\r\n    const { id } = useParams();\r\n    const location = useLocation();\r\n    const { person } = location.state || {};\r\n\r\n    const name = person ? person.model_original_name : dummyName;\r\n    const modelname = person ? person.modelname : \"\";\r\n\r\n    async function sendMessageHandler(userMessage) {\r\n        setMessages([...messages, { type: \"user\", text: userMessage }]);\r\n        setLoadingHint(true);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"is_shared\", \"false\");\r\n        formData.append(\"modelname\", modelname);\r\n        formData.append(\"input_text\", userMessage);\r\n\r\n        try {\r\n            const response = await inference(formData);\r\n            const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n            if (response.status === 200) {\r\n                const responseData = await response.json();\r\n                const results = responseData.result;\r\n                if (results.length === 1) {\r\n                    // 只有一個回答時\r\n                    const botOutput = results[0].output;\r\n                    setLoadingHint(false);\r\n                    setMessages((prevMessages) => [\r\n                        ...prevMessages,\r\n                        { type: \"bot\", text: botOutput },\r\n                    ]);\r\n                    updateConversationHistory({\r\n                        user: userMessage,\r\n                        model: botOutput,\r\n                    });\r\n                    console.log(conversationHistory);\r\n\r\n                  } else if (results.length > 1) {\r\n                    // 有兩個或更多回答時\r\n                    let botOutputs = []\r\n                    botOutputs[0] = results[0].output;\r\n                    botOutputs[1] = results[1].output;\r\n                    setLoadingHint(false);\r\n                    setPendingChoices(botOutputs);\r\n                    console.log(conversationHistory);\r\n                }\r\n\r\n\r\n            } else if (response.status === 400) {\r\n                const responseData = await response.json();\r\n                const error = responseData.error;\r\n                console.log(\"錯誤訊息: \" + error);\r\n            } else if (response.status === 401 && accessToken) {\r\n                // access Token過期，用refresh Token去拿新的access Token\r\n                const checkReTokenStatus = await refresh();\r\n                console.log(\"refresh中\");\r\n                if (checkReTokenStatus) {\r\n                    const response = await inference(formData);\r\n                    console.log(\"refresh成功\");\r\n                    if (response.status === 200) {\r\n                        const responseData = await response.json();\r\n                        const results = responseData.result;\r\n                        if (results.length === 1) {\r\n                            // 只有一個回答時\r\n                            const botOutput = results[0].output;\r\n                            setLoadingHint(false);\r\n                            setMessages((prevMessages) => [\r\n                                ...prevMessages,\r\n                                { type: \"bot\", text: botOutput },\r\n                            ]);\r\n                            updateConversationHistory({\r\n                                user: userMessage,\r\n                                model: botOutput,\r\n                            });\r\n\r\n                          } else if (results.length > 1) {\r\n                            // 有兩個或更多回答時\r\n                            let botOutputs = []\r\n                            botOutputs[0] = results[0].output;\r\n                            botOutputs[1] = results[1].output;\r\n                            setLoadingHint(false);\r\n                            setPendingChoices(botOutputs);\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    // refresh Token過期，重新登入並刪掉 localStorage 裡的東西\r\n                    // alert(\"refresh Token過期，請重新登入!\");\r\n                    localStorage.clear();\r\n                    redirect(\"/login\");\r\n                }\r\n            } else {\r\n                const responseData = await response.json();\r\n                const error = responseData.message;\r\n                console.error(error);\r\n                alert(\"發生錯誤，請重新整理後再試一次\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error durning inference model: \", error);\r\n            redirect(\"/login\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function updateConversationHistory(newConversation) {\r\n        setConversationHistory((prevHistory) => {\r\n            const updatedHistory = [...prevHistory, newConversation];\r\n            if (updatedHistory.length > 5) {\r\n                updatedHistory.shift(); // 超過 5 條時刪除最舊的\r\n            }\r\n            return updatedHistory;\r\n        });\r\n    }\r\n\r\n    function handleChoice(selection) {\r\n        // 添加選擇的回覆為 botMessage\r\n        setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { type: \"bot\", text: selection },\r\n        ]);\r\n\r\n        updateConversationHistory({\r\n            user: messages[messages.length - 1]?.text || \"\",\r\n            model: selection,\r\n        });\r\n\r\n        // 隱藏選擇元件\r\n        setPendingChoices(null);\r\n    }\r\n\r\n    function scrollToBottom() {\r\n        // 滾動到消息列表底部\r\n        if (messagesEndRef.current) {\r\n            messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={pageSize ? classes.outerContainerDummy : classes.outerContainer}>\r\n                <ChatRoomHeader name={name} />\r\n                <div className={classes.listContainer}>\r\n                    {messages.map((message, index) =>\r\n                        message.type === \"user\" ? (\r\n                            <UserMessage key={index} content={message.text} />\r\n                        ) : (\r\n                            <BotMessage key={index} content={message.text} avatar={person.modelphoto} />\r\n                        )\r\n                    )}\r\n                    {pendingChoices && (\r\n                        <ChooseResponse\r\n                            res1={pendingChoices[0]}\r\n                            res2={pendingChoices[1]}\r\n                            onChoose={handleChoice}\r\n                            avatar={person.modelphoto}\r\n                        />\r\n                    )}\r\n                    <div ref={messagesEndRef}></div>\r\n                </div>\r\n                <MessageInput onSendMessage={sendMessageHandler} name={name} loadingHint={loadingHint} disabled={loadingHint} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MessageList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}